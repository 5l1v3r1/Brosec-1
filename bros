#!/usr/bin/env node

var argv = require('yargs').argv,
  log = require('cli-color'),
  db = require('./db/db'),
  menu = require('./modules/menu'),
  secondaryMenu = require("./modules/secondaryMenu"),
  check = require('./modules/inputChecks'),
  simpleWeb = require('./modules/webserver/simple.js'),
  simpleFtp = require('./modules/webserver/simpleFtp.js'),
  interfaces = require('./modules/interfaces'),
  settings = require('./settings'),
  child_process = require('child_process'),
  utilities = require('./modules/utilities'),
  log = require('./modules/log.js');

var firstArgument = argv._[0];
var secondArgument = argv._[1];
var thirdArgument = argv._[2];






function getFirstArgValue(arg) {
  switch (arg) {
    case 1:
      return secondaryMenu.infoGathering;
      break;
    case 2:
      return secondaryMenu.linux;
      break;
    case 3:
      return secondaryMenu.windows;
      break;
    case 4:
      return secondaryMenu.webAttacks;
    case 5:
      return secondaryMenu.misc;
  }
}

function parseArgs() {
  var oldSecondary;

  if (firstArgument >= 1 && firstArgument <= 6) {
    secondaryMenu = getFirstArgValue(firstArgument);

    if (!secondArgument) {
      secondaryMenu();
    } else if (!thirdArgument) {
      secondaryMenu(secondArgument);
    } else {
      secondaryMenu(secondArgument, thirdArgument);
    }

  } else if (firstArgument > 10) {

    // If input is entered as "bros 111" split up the input and handle them individually
    var splitInput = firstArgument.toString(10).split("").map(function(t) {
      return parseInt(t)
    })
    var inputLength = splitInput.length;

    secondaryMenu = getFirstArgValue(splitInput[0]);

    switch (inputLength) {
      case 2:
        secondaryMenu(splitInput[1]);
        break;
      case 3:
        secondaryMenu(splitInput[1], splitInput[2])
    }
  } else if (typeof(firstArgument) === "string") {
    firstArgument = firstArgument.toUpperCase();
    try {
      oldSecondary = secondArgument;
      secondArgument = secondArgument.toUpperCase();
    } catch(err){

    }
    // If input is bros http, start a webserver using expressjs, pass all args
    // to the simple web server module
    if (firstArgument === "HTTP") {
      simpleWeb.http(argv);
    } else if (firstArgument === "HTTPS") {
      simpleWeb.https(argv);
    } else if (firstArgument === "FTP"){
      simpleFtp.ftp(argv);
    } else if (firstArgument === "FTPS"){
      console.log("Sorry, FTPs support is planned but currently not available")
      //simpleFtp.ftps(argv);
    } else if (firstArgument === "UPDATE"){
      utilities.update();
    } else if (firstArgument === "ENCODE"){
      if (secondArgument){
        utilities.encoder(oldSecondary);  
      } else {
        utilities.encoder();
      }
      
    } else if (firstArgument+" "+secondArgument === "SET LHOST" && !thirdArgument){
      interfaces.setlhost();

    } else if (firstArgument != "CONFIG") {
      if (secondArgument && thirdArgument) {
        check.allInputChecks(firstArgument + " " + secondArgument + " " + thirdArgument, console.log, menu.mainMenu)
      } else if (firstArgument === "HELP") {
        check.allInputChecks(firstArgument, menu.mainMenu, menu.mainMenu);
      } else if (firstArgument === "CLEAN") {
        child_process.execFile('rm', [settings.dbPath], function(error, stdout, stderr){  	
        });
        console.log("The Brosec database located at %s has been wiped.", settings.dbPath)
      } 
      else {
        check.allInputChecks(firstArgument, console.log, console.log)
      }
    } else {
      console.log(log.yellow("\n[*] Sorry, that isn't valid input from the command line"))
      menu.mainMenu();
    }

  } else {
    menu.mainMenu();
  }
}

if (!firstArgument) {
  menu.mainMenu();
} else {
  parseArgs();
}
